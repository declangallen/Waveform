swirl()
library(swirl)
install.packages("AppliedPredictiveModeling")
adData <- data(AlzheimerSDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
str(concrete$CompressiveStrength)
summary(concrete$CompressiveStrength)
install.packages("Hmisc")
qplot(concrete$CompressiveStrength)
index <- mutate()
install.packages("dplyr")
index <- seq_along(1:nrow(training))
ggplot(concrete,aes(x=index,y=CompressiveStrength))+geom_point()
ggplot(training,aes(x=index,y=CompressiveStrength))+geom_point()
View(concrete)
View(concrete)
View(concrete)
cutCS <- cut2(training$CompressiveStrength,g=)
cutCS <- cut2(training$CompressiveStrength,g=4)
library(Hmisc)
cutCS <- cut2(training$CompressiveStrength,g=4)
ggplot(training,aes(x=index,y=CompressiveStrength))+geom_point(color=cutCS)
ggplot(training,aes(x=index,y=CompressiveStrength))+geom_boxplot()+geom_jitter()
ggplot(training,aes(x=cutCS,y=CompressiveStrength))+geom_boxplot()+geom_jitter()
ggplot(training,aes(x=cutCS,y=index))+geom_boxplot()+geom_jitter()
hist(concrete$Superplasticizer)
summary(concrete$Superplasticizer)
which(sapply(adData,class)=="Factor")
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training$diagnosis)
training$diagnosis <- as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p[,rotation]
p$rotation
preProcess <- preProcess(training[,grep('^IL',names(training))],method = 'pca', thresh = 0.9)
preProcess
preProcess <- preProcess(training[,grep('^IL',names(training))],method = 'pca', thresh = 0.75)
preProcess
x <- c(22,3,7,NANA.67)
length(x)
x <- c(22,3,7,NA,NA.67)
length(x)
x <- c(22,3,7,NA,NA,67)
length(x)
x <- c(NA,3,14,NA,33,NA,15)
x[x==NA]
x <- c(NA,3,14,NA,33,NA,15)
x[!x==NA]
x
x[x==NA] <- 7
x
x[is.na(x)]
x[is.na(x)] <- 'no value'
x
x <- c(NA,3,14,NA,33,NA,15)
sum(x[is.na(x)])
(x[is.na(x)])
count(x[is.na(x)])
(x[is.na(x)])
length(x[is.na(x)])
sum(x==NA)
(x==NA)
x
is.na(x)
sum(is.na(x))
is.na(w)
w <- c(11,3,5,NA,6)
is.na(w)
data("Orange")
head(Orange)
dim(Orange)
qplot(Orange$age,Orange$circumference)
install.packages('ggplot2')
qplot(Orange$age,Orange$circumference)
library(ggplot2)
qplot(Orange$age,Orange$circumference)
Orange[Orange$age==118] <- NA
view(Orange)
View(Orange)
Orange$age[Orange$age==118] <- NA
View(Orange)
mean(Orange$age[Orange$age!==NA])
mean(Orange$age[Orange$age!=NA])
mean(Orange$age,na.rm = T)
mean(Orange$circumference,na.rm = T)
x <- rbind(c1,c2,c3,deparse.level = 1)
x
c1 <- c(1,2,3,NA)
c2 <- c(2,4,6,89)
c3 <- c(45,NA,66,101)
x <- rbind(c1,c2,c3,deparse.level = 1)
x
c1 <- c(1,2,3,NA)
c2 <- c(2,4,6,89)
c3 <- c(45,NA,66,101)
x <- rbind(c1,c2,c3,deparse.level = 0)
x
c1 <- c(1,2,3,NA)
c2 <- c(2,4,6,89)
c3 <- c(45,NA,66,101)
x <- rbind(c1,c2,c3,deparse.level = 2)
x
x[complete.cases(x),]
x[!complete.cases(x),]
df <- data.frame (Name = c(NA, “Joseph”, “Martin”, NA, “Andrea”),
Sales = c(15, 18, 21, 56, 60),
Price = c(34, 52, 21, 44, 20),
stringsAsFactors = FALSE)
df <- data.frame (Name = c(NA, “Joseph”, “Martin”, NA, “Andrea”),
Sales = c(15, 18, 21, 56, 60),
Price = c(34, 52, 21, 44, 20),
stringsAsFactors = FALSE)
df <- data.frame (Name = c(NA, 'Joseph', 'Martin', NA, 'Andrea'),
Sales = c(15, 18, 21, 56, 60),
Price = c(34, 52, 21, 44, 20),
stringsAsFactors = FALSE)
df
df[!is.na(df$Name),]
df[!is.na(df$Name)|is.na(df$Sales)|is.na(df$Price)]
df[!is.na(df$Name)|is.na(df$Sales)|is.na(df$Price),]
df <- data.frame (Name = c(NA, 'Joseph', 'Martin', NA, 'Andrea'),
Sales = c(15, 18, 21, 56, 60),
Price = c(34, 52, 21, 44, 20),
stringsAsFactors = FALSE)
df
df[!is.na(df$Name)|is.na(df$Sales)|is.na(df$Price),]
df <- data.frame (Name = c(NA, 'Joseph', 'Martin', NA, 'Andrea'),
Sales = c(15, 18, 21, NA, 60),
Price = c(34, 52, 21, 44, NA),
stringsAsFactors = FALSE)
df
df[!is.na(df$Name)|is.na(df$Sales)|is.na(df$Price),]
df[!9is.na(df$Name)|is.na(df$Sales)|is.na(df$Price)),]
df[!(is.na(df$Name)|is.na(df$Sales)|is.na(df$Price)),]
x <- c("ww", "ee", "ff", "uu", "kk")
x[c(2,1)]
x[c(2,1)]
x[-2]
a <- c(3,4,5,8,7)
b <- c(T,F,T,T,F)
sum(a[b])
s
s <- data.frame(first= as.factor(c("x", "y", "a", "b", "x", "z")), second=c(2, 4, 6, 8, 10, 12))
s
s$second[(s$first=="x")|(s$first=="y")]
(c(FALSE, TRUE)) || (c(18, 50))
(c(FALSE, TRUE)) || (c(FALSE,TRUE))
(c(FALSE, FALSE)) || (c(FALSE,TRUE))
(c(TRUE, TRUE)) || (c(FALSE,TRUE))
x = c(1,4,2,5,8,4,4,2,2)
factor(x)
x = c(1,4,2,5,8,4,4,2,2)
factor(x,ordered = T)
x = c(1,4,2,5,8,4,4,2,2)
factor(x,levles = c(1,4,2,5,8),ordered = T)
x = c(1,4,2,5,8,4,4,2,2)
factor(x,levels = c(1,4,2,5,8),ordered = T)
x = c(1,4,2,5,8,4,4,2,2)
factor(x,levels = c(1,4,5,8),ordered = T)
z <- c("p", "a" , "g", "t", "b")
factor(z[3]) <- "b"
z <- factor(c("p", "q", "p", "r", "q"))
factor(z)
factor(z) <- c("w","q",'r')
levels(z) <- c("w","q",'r')
z
s1 <- factor(sample(letters, size=5, replace=TRUE))
s2 <- factor(sample(letters, size=5, replace=TRUE))
s1
s1
s1
factor(c(levels(s1)[s1],levels(s2)[s2]))
head(iris)
table(cut(iris$Sepal.Length,5))
table(iris$Sepal.Length < 5, iris$Species)
responses
responses <- factor(c("Agree", "Agree", "Strongly Agree", "Disagree", "Agree"))
responses
x <- data.frame(q=c(2, 4, 6), p=c("a", "b", "c"))
x
as.factor(x$q)
str(x)
x <- data.frame(q=c(2, 4, 6), p=c("a", "b", "c"))
str(x)
levels(x$p) <- c("Fert1",'Fert2','fert3')
x
read_csv('C:/Users/Declan/Desktop/R/Version 2_0_1/GEOSTAT_grid_POP_1K_2011_V2_0_1.csv') %>%
rbind(read_csv('C:/Users/Declan/Desktop/R/Version 2_0_1/JRC-GHSL_AIT-grid-POP_1K_2011.csv')%>%
mutate(TOT_P_CON_DT='')) %>%
mutate(lat = as.numeric(gsub('.*N([0-9]+)[EW].*', '\\1', GRD_ID))/100,
lng = as.numeric(gsub('.*[EW]([0-9]+)', '\\1', GRD_ID)) * ifelse(gsub('.*([EW]).*', '\\1', GRD_ID) == 'W', -1, 1) / 100) %>%
filter(lng > 25, lng < 60) %>%
group_by(lat=round(lat, 1), lng=round(lng, 1)) %>%
summarize(value = sum(TOT_P, na.rm=TRUE))  %>%
ungroup() %>%
complete(lat, lng) %>%
ggplot(aes(lng, lat + 5*(value/max(value, na.rm=TRUE)))) +
geom_line(size=0.4, alpha=0.8, color='#5A3E37', aes(group=lat), na.rm=TRUE) +
ggthemes::theme_map() +
coord_equal(0.9)
ggsave('C:/Users/Declan/Desktop/R/Version 2_0_1/europe.png', width=10, height=10)
install.packages('tidyverse')
library(tidyverse)
read_csv('C:/Users/Declan/Desktop/R/Version 2_0_1/GEOSTAT_grid_POP_1K_2011_V2_0_1.csv') %>%
rbind(read_csv('C:/Users/Declan/Desktop/R/Version 2_0_1/JRC-GHSL_AIT-grid-POP_1K_2011.csv')%>%
mutate(TOT_P_CON_DT='')) %>%
mutate(lat = as.numeric(gsub('.*N([0-9]+)[EW].*', '\\1', GRD_ID))/100,
lng = as.numeric(gsub('.*[EW]([0-9]+)', '\\1', GRD_ID)) * ifelse(gsub('.*([EW]).*', '\\1', GRD_ID) == 'W', -1, 1) / 100) %>%
filter(lng > 25, lng < 60) %>%
group_by(lat=round(lat, 1), lng=round(lng, 1)) %>%
summarize(value = sum(TOT_P, na.rm=TRUE))  %>%
ungroup() %>%
complete(lat, lng) %>%
ggplot(aes(lng, lat + 5*(value/max(value, na.rm=TRUE)))) +
geom_line(size=0.4, alpha=0.8, color='#5A3E37', aes(group=lat), na.rm=TRUE) +
ggthemes::theme_map() +
coord_equal(0.9)
ggsave('C:/Users/Declan/Desktop/R/Version 2_0_1/europe.png', width=10, height=10)
install.packages("reshape2")
library(reshape2)
install.packages("stringr")
library(stringr)
install.packages("dplyr")
library(dplyr)
install.packages("stringr")
data <- read.csv("Keystone Annual 2016 for Rebalance.csv")
colnames(data)[c(4,5,8,9)] <- c("StruturePS2016","StructureIRF2016","StructurePS2017","StructureIRF2017")
dataMelt <- melt(data,id.vars = c(-4,-5,-8,-9),
variable.name = "Measure",
value.name = "Potential")
dataMelt$divid <- ifelse(dataMelt$Potential<=-1.2,1,0)
dataMelt2017 <- filter(dataMelt,str_detect(Measure,"2017"))
p <- ggplot(dataMelt2017, aes(x=Potential))+
geom_histogram()
p
dim(cleanrtestSet)
dim(cleantestSet)
dim(CleantestSet)
CleantestSet <- testSet[, names(testSet)[sapply(testSet, function(x) !any(is.na(x)))>0.95]]
testSet <- testSet[,-nzv]
testSet <- training[-inTrain,]
dim(trainingSet)
testing <- read.csv("pml-testing.csv")
inTrain <- training$classe %>% createDataPartition(p=0.7,list=FALSE)
library(caret)
library(ggplot2)
library(knitr)
library(corrplot)
library(dplyr)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
dim(training)
inTrain <- training$classe %>% createDataPartition(p=0.7,list=FALSE)
trainingSet <- training[inTrain,]
testSet <- training[-inTrain,]
dim(trainingSet)
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[,-nzv]
testSet <- testSet[,-nzv]
dim(trainingSet)
cleantrainingSet <- trainingSet[, names(trainingSet)[sapply(trainingSet, function(x) !any(is.na(x)))>0.95]]
CleantestSet <- testSet[, names(testSet)[sapply(testSet, function(x) !any(is.na(x)))>0.95]]
cleantrainingSet <- cleantrainingSet[,-c(1:5)]
CleantestSet <- CleantestSet[,-c(1:5)]
dim(cleantrainingSet)
dim(CleantestSet)
name(CleantestSet[,54])
names(CleantestSet[,54])
names(CleantestSet)
names(CleantestSet[54])
names(testing[160])
names(testing[150:160])
names(testing)
corPlot<- cor(cleantrainingSet[,-54])
corrplot(corPlot,method = "ellipse",type="lower",order="FPC",tl.cex=0.65)
modFit$finalModel
set.seed(1432)
control <- trainControl(method="cv",number=5,verboseIter = FALSE)
modFit <- train(classe~.,data=cleantrainingSet,method="rf",trainControl=control)
corPlot<- cor(cleantrainingSet[,-54])
corrplot(corPlot,method = "ellipse",type="lower",order="FPC",tl.cex=0.65)
modFit$finalModel
set.seed(1432)
control <- trainControl(method="cv",number=5,verboseIter = FALSE)
modFit <- train(classe~.,data=cleantrainingSet,method="rf",trainControl=control)
modFit$finalModel
prediction <- predict(modFit, CleantestSet$classe, type="class")
prediction <- predict(modFit, CleantestSet$classe, type="prob")
prediction <- predict(modFit, testing, type="prob")
confusionMatrix(prediction,CleantestSet$classe)
prediction <- predict(modFit, testing, type="class")
prediction <- predict(modFit, CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
predictTest <- predict(modFit, testing,type="class")
predictTest <- predict(modFit, testing)
predictTest
set.seed(1432)
control <- trainControl(method="cv",number=5,verboseIter = FALSE)
modFit <- train(classe~.,data=cleantrainingSet,method="rf",trainControl=control)
modFit$finalModel
confusionMatrix(prediction,CleantestSet$classe)
predictTest <- predict(modFit, testing)
predictTest
prediction <- predict(modFit, CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
modFit$finalModel
prediction <- predict(modFit, CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
prediction <- predict(modFit, CleantestSet )
prediction <- predict(modFit, CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
```{r }
prediction <- predict(modFit, data=CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
prediction <- predict(modFit, data=CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
prediction
CleantestSet
prediction <- predict(modFit, newdata=CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
set.seed(1432)
control <- trainControl(method="cv",number=5,verboseIter = FALSE)
modFit <- train(classe~.,data=cleantrainingSet,method="rf",trainControl=control)
modFit$finalModel
modFit
prediction <- predict(modFit$finalModel, newdata=CleantestSet )
confusionMatrix(prediction,CleantestSet$classe)
library(caret)
library(ggplot2)
library(knitr)
library(corrplot)
library(dplyr)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
dim(training)
inTrain <- training$classe %>% createDataPartition(p=0.7,list=FALSE)
trainingSet <- training[inTrain,]
testSet <- training[-inTrain,]
dim(trainingSet)
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[,-nzv]
testSet <- testSet[,-nzv]
dim(trainingSet)
cleantrainingSet <- trainingSet[, names(trainingSet)[sapply(trainingSet, function(x) !any(is.na(x)))>0.95]]
CleantestSet <- testSet[, names(testSet)[sapply(testSet, function(x) !any(is.na(x)))>0.95]]
cleantrainingSet <- cleantrainingSet[,-c(1:5)]
CleantestSet <- CleantestSet[,-c(1:5)]
dim(cleantrainingSet)
corPlot<- cor(cleantrainingSet[,-54])
corrplot(corPlot,method = "ellipse",type="lower",order="FPC",tl.cex=0.65)
modFit
modFit$finalModel
names(modFit)
names(testing)
dim(cleantestSet)
dim(CleantestSet)
dim(cleantrainingSet)
shiny::runApp('C:/Users/Declan/Desktop/R/Shiny/testui')
runApp('C:/Users/Declan/Desktop/R/Shiny/testui')
runApp('C:/Users/Declan/Desktop/R/Shiny/testui')
runApp('C:/Users/Declan/Desktop/R/Shiny/testui')
runApp('C:/Users/Declan/Desktop/R/Shiny/testui')
runApp('C:/Users/Declan/Desktop/R/Shiny/testui')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
install.packages("miniUI")
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
shiny::runApp('C:/Users/Declan/Desktop/R/Shiny/ShinyWaveform')
shiny::runApp()
